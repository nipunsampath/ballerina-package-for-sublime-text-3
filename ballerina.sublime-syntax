%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
name: Ballerina
file_extensions:
  - bal
scope: source.bal
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.ballerina
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.ballerina
      push: line_comment

    # Keywords 
    - match: '\b(iterator|try|catch|match|finally|fork|join|all|some|while|foreach|throw|return|returns|break|timeout|transaction|aborted|abort|committed|failed|retries|next|bind|with|lengthof|typeof|enum)\b'
      scope: keyword.control.ballerina
    - match: '\b(if|else)\b'
      scope: keyword.control.conditional.ballerina
    - match: '\b(import)\b'
      scope: keyword.control.import.ballerina
    - match: \b(version|public|attach|as|native|documentation|lock)\b
      scope: keyword.control.other.ballerina
    - match: \b(annotation|package|type|struct|transformer|endpoint)\b
      scope: keyword.control.other.ballerina
    - match: \b(const|true|false|reply|create|parameter)\b
      scope: keyword.control.other.ballerina

    # Operators
    - match: '(!|%|\+|\-|~=|==|=|!=|<|>|&&|\|\|.@|)'
      scope: keyword.operator.ballerina
    
    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.ballerina

    # Stray brackets
    - match: \(
      push: brackets
    - match: \)
      scope: invalid.illegal.stray-bracket-end

    # Functions and services
    - match: \b(function|service|resource|connector|action|worker)\b
      scope: storage.type.function.ballerina

    # Storage types
    - match: \b(boolean|int|float|string|var|any|datatable|blob)\b
      scope: storage.type.ballerina
    - match: \b(map|exception|json|xml|xmlns|error|byte|handle)\b
      scope: storage.type.ballerina 

    # Annotations
    - match: '@[a-zA-Z0-9_$]+'
      scope: storage.type.annotations.ballerina

  double_quoted_string:
    - meta_scope: string.quoted.double.ballerina
    - match: '\\.'
      scope: constant.character.escape.ballerina
    - match: '"'
      scope: punctuation.definition.string.end.ballerina
      pop: true

  line_comment:
    - meta_scope: comment.line.ballerina
    - match: $
      pop: true

  brackets:
    - match: \)
      pop: true
    - include: main
